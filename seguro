#!/bin/bash

# Seguro Backup Script
# --------------------

# Keeps a small data file of user settings
# Makes simple copies of selected data to defined device
# into a folder it creates, called by the day's date

#
# Variables
#
declare -a LabelArray # Labels require an array as they may be several words with spaces
declare -a PathArray  # Use an array for filepaths also, to allow matching
Passed=" - Feliz Simple Backup Utility - "

#
# Functions
#

MainMenu() {
  x="Don't quit"
  until [ x = "Quit" ]
  do
    dialog --backtitle "$Backtitle" --title " Feliz Backup Utility " --no-shadow --ok-button "Select" --cancel-button "Quit" --menu "\nWelcome to the Feliz Backup Utility\n" 15 40 2 \
    "Settings" "View and change" \
    "Run" "Choose and run" 2> seguro.output
    if [ $? -gt 0 ]; then # 'Quit' selected
      exit
    else
      Selected=`cat seguro.output`
    fi
    case $Selected in
    "Settings") OpenDataFile    # Open existing file and extract data to arrays
          DisplayDataFile       # Display settings and confirm or change any details
     ;; 
    *) # RunBackups
      BackupCheckList
      ActionBackup
    esac
  done
}

#
# Data file handling
#

CheckDataFile() {  # First check if data file exists
while [ ! -f `pwd`/seguro.data ]
do
  CreateDataFile
done
while [ -z $seguro.data ]  # In case it is empty
do
  CreateDataFile
done
}

CreateDataFile() { # If this is first time, data file does not exist or is empty.
  NewDataFile="Yes"
  Exit="No"
  until [ $Exit = "Yes" ]
  do
    # Inform user
    dialog --title " - First - " --clear --msgbox "This appears to be the first time Seguro has run on this machine. Before you can make any backups, you will have to set a destination device and at least one source." 10 45
    ChooseDestination # Choose destination device
  done
}

ChooseDestination() { # Create a list of available devices
  Exit="No"
  UserName=`whoami`
  External=`ls /media/$UserName/`
  Local=`ls ~/`
  All="$External Local_drive"
  Message="Choose a destination device for your backups. Make sure that the device is turned on."
  until [ $Exit = "Yes" ]
  do
    listgen1 "$All" " Destination " ""
    if [ $? -gt 0 ]; then
      Exit="Yes"
    else
      Selection=`cat seguro.output`
      case $Selection in
      "Local_drive") StartPath="/home/$UserName" ;;
      *) StartPath="$Selection"
      esac
      dialog --title " - Destination - " --clear --yes-button "$StartPath" --no-button "Deeper" --yesno "Seguro will create a dated folder in your chosen destination for each backup. Use device '$StartPath' or select an existing directory?" 10 45
      case $? in
      0) Destination="$StartPath" # ie: Yes - finish with selected $StartPath
        Exit="Yes"
        ;;
      *) # ie: No (Existing directory) - offer directories until done
        if [ $Selection = "Local_drive" ]; then
          All=`ls $StartPath`
        else
          All=`ls /media/$UserName/${StartPath}`
        fi
      esac
    fi
    # Save filepath output and check it
    DestinationPath="$All"
    if [ $NewDataFile="Yes" ]; then
      # Create new data file and save destination
      echo "Destination/$StartPath/" > seguro.data
    else
      # Replace existing Destination with new one
      sed -i "/Destination/ c\'Destination/$StartPath/'" seguro.data
      # Check this!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    fi
    SaveTo="$Destination/${Today}/"
    Exit="Yes"
  done
}

AddSource() { # (unwritten function)
  echo
  # Add a new source
  # Save to seguro.data
}

EditSource() { # (unwritten function)
  echo
  # Edit or delete an existing source
  # Save to seguro.data
}

OpenDataFile() { # Extract records from existing file into arrays
  # Count number of lines
  HowMany=`cat -n seguro.data | awk '{print $1}' | tail -c -2`
  # Copy each line into array. Line consists of a label and a filepath
  # There are no spaces between the label and path
  declare -a ItemsArray
  Count=1
  until [ $Count -gt $HowMany ]; do
    ItemsArray[${Count}]=`sed -n "$Count p" seguro.data`
    Count=$((Count+1))
  done 
  # Separate labels from filepaths
  ListofPaths="" # String array to pass list of filepaths to listgen2
  for ((Count=1;Count<=$HowMany;Count++))
    {
    # 1) Label
    Label=`echo ${ItemsArray[${Count}]} | cut -d / -f 1`
    LabelArray[${Count}]="$Label"
    LengthOfLabel=${#Label}
    LengthOfLabel=$(( LengthOfLabel +1 ))
    # 2) Path
    FilePath=`echo ${ItemsArray[${Count}]} | cut -c ${LengthOfLabel}-`
    PathArray[${Count}]="$FilePath"
    ListofPaths="$ListofPaths $FilePath" # For menu display
    }
}

DisplayDataFile() {  # Display existing settings and add, delete or change any details
  Exit="No"
  until [ $Exit = "Yes" ]
  do
    # Call menu dialog to display all items - a) Destination; b) Sources
    Message="\nHere are all your current backup settings ...\nPlease <Select> one to edit/delete, or <Cancel> to quit or <Add> to add a new source"
    listgen2 "$ListofPaths" " - Current Settings - " "add" "LabelArray"
    case $? in
    1) Exit="Yes" # ie: Cancel button selected (no action)
      continue
      ;;
    2) AddSource # ie: Help button selected (add a source path)
      ;;
    *) SelectedPath=$(cat seguro.output) # ie: Ok/Edit button selected - item to be edited or deleted
      Counter=1
      for i in $ListofPaths[@]; do # Match filepath output from dialog with its counterpart in LabelArray
        if [ $i = $SelectedPath ]; then
          SelectedLabel="${LabelArray[${Counter}]}"
          break
        fi
      done
      # Appropriate action dialog
      if [ $SelectedLabel = "Destination" ]; then
        # Special action dialog for Destination - only allows change
        NewDataFile="No"
        ChooseDestination
      else # ie: This is a source
        DeleteSource # Confirm delete this source
      fi
    esac
  done
}

BackupCheckList() { # A dialog checklist of saved sources.
  # User can check/uncheck items before proceeding to run backup
  OpenDataFile # 1) Rebuild list of names to be sure it's up-to-date
  # Prepare for display
  local Counter=1
  LineCounter=0
  declare -a Options
  # Prepare Options array for dialog checklist
  until [ $LineCounter -eq $HowMany ]
  do
    LineCounter=$((LineCounter+1))
    if [ "${LabelArray[${LineCounter}]}" != "Destination" ]; then
      Options[${Counter}]="${LabelArray[${LineCounter}]}"
      Counter=$((Counter+1))
      Options[${Counter}]=" "
      Counter=$((Counter+1))
      Options[${Counter}]="on"
      Counter=$((Counter+1))
    fi
  done
  # User selects from checklist
  dialog --backtitle " - Seguro Backup - " --title " - Run backup - " --separate-output --checklist "Select which items to backup using this list.\nPress SPACE to toggle an item on/off" 20 61 5 \
        "${Options[@]}" \
        2> seguro.output
  Precheck # Checks that destination is ready
}

Precheck() { # Check that destination is switched on before starting action
  Exit="No"
  until [ $Exit = "Yes" ]
  do
    Destination=`cat seguro.data | awk '{print $1}' | cut -c 12-`
    Target=`ls $Destination` # Check that it is turned on
    if [ -n "$Target" ]; then
      Today=`date +%F`       # Today's date
      Target1=`ls $Destination | grep ${Today}` # Check for existing backup
      if [ -z "$Target1" ]; then
        mkdir $Destination$Today
      fi
    else
      while [ -z "$Target" ]
      do
        dialog --title " - Not ready - " --clear --yesno "The destination device appears to be turned off. Please turn it on, then select <Ok> to try again." 10 45
        if [ $? -eq 0 ]; then
          Target=`ls $Destination`
        else
          Exit="Yes"
          break
        fi
      done
    fi
    if [ $Exit != "Yes" ]; then
      ActionBackup
      Exit="Yes"
    fi
  done
}

ActionBackup() { # Retrieve items and copy sources to destination
  clear
  HowMany=`cat -n seguro.output | awk '{print $1}' | tail -c -2`
# Go through the list of selected items, checking label against $LabelArray
# and getting record number to retrieve path from $PathArray
  Counter=1
  until [ $Counter -gt $HowMany ]
  do  
    item=`cat -n seguro.output | grep $Counter | cut -c 8-`
    Count=1 
    until [ $Count -eq $HowMany ]
    do
      Retrieve=$((Count+1)) # Use item number in the arrays, ignoring Destination
      if [ "${LabelArray[${Retrieve}]}" = "$item" ]; then # Item matches $LabelArray
        # Find same number in PathArray
        ItemPath=${PathArray[${Retrieve}]}
        cp -r $ItemPath $Destination$Today/
        break
      fi
      Count=$((Count+1))
    done
    Counter=$((Counter+1))
  done
}

DeleteSource() { # (unwritten function)
  # First confirm delete
  # Then delete it
  echo # (placeholder for empty function)
}

#
# Listgen functions
#
listgen1() { # Prepare single-column list
  local Backtitle="$Passed"
  local Title="$2"
  if [ $3 ]; then
    case $3 in
      "nocancel") CancelButton="--nocancel"
      ;;
      *) CancelButton="--cancel-label $3"
    esac
  else
    CancelButton=""
  fi
  local Counter=0
  declare -a Options
  if [ ! $Width ]; then
    Width=40
  fi
  # Prepare $1 for dialog menu
  for item in $1 # Prepare string array of list items passed as $1
  do
    Counter=$((Counter+1))
    Options[${Counter}]="$item"
    Counter=$((Counter+1))
    Options[${Counter}]="-"
    Length=`echo ${#item}`
    if [ $Length -gt $Width ]; then
      Width=$((Length+20))
    fi
  done
  NoTag="--no-tag"
  Printit
}

listgen2() { # Prepare dual-column list
  local Backtitle="$Passed"
  local Title="$2"
  if [ $3 ]; then
    case $3 in
      "nocancel") CancelButton="--nocancel"
      ;;
      "add") CancelButton="--help-button --help-label Add"
      ;;
      *) CancelButton="--cancel-label $3"
    esac
  else
    CancelButton=""
  fi
  declare -a Options
  local Counter=0
  for item in $1; do
    Items[${Counter}]=$item
    Counter=$((Counter+1))
  done
  Counter=0
  local ItemCounter=0
  # Import the complex array
  name=$4[@]
  LongName=("${!name}")
  if [ ! $Width ]; then
    Width=50
  fi
  # Prepare $1 and $4 for dialog menu
  for item in "${LongName[@]}"; do
    Options[$((Counter))]="${Items[${ItemCounter}]}"
    Options[$((Counter+1))]="$item"
    Counter=$((Counter+2))
    ItemCounter=$((ItemCounter+1))
    Length=`echo ${#item}`
    if [ $Length -gt $Width ]; then
      Width=$((Length+30))
    fi
  done
  NoTag=""
  Printit # The final frontier
}

Printit() { # Display the list prepared in listgen1 or listgen2
  Counter=$((Counter/2))
  # Calculate number of lines
  echo $Message > seguro.output
  countcharacters=`cat seguro.output | wc -c`  # Count number of characters in $Message
  countlines=$((countcharacters/Width)) # Calculate lines
  echo $Message | sed 's/[^\\]//g' > seguro.output   # Use sed to remove all except newlines
  countnewlines=`cat seguro.output | wc -c` # Count newline characters
  Height=$((countlines+countnewlines+Counter+16-Counter))
  if [ $Height -gt 19 ]; then
    Height=19
    if [ $Width -lt 50 ]; then
      Width=$((Width+10))
    fi
  fi
  # Use $Counter and ${Options[@]} array in dialog
  dialog --backtitle "$Backtitle" --title " $Title " --no-shadow --ok-button "Select" $CancelButton \
      --menu "$Message\n" $Height $Width $Counter "${Options[@]}" 2> seguro.output
}

#
# Operational
#

CheckTarget() { # Checks in case target folder and files already exists
  if [ ! -d "$saveto" ]; then
    mkdir "${saveto}"
    echo "Copying files from $savefrom to $saveto"
    cp -a ${savefrom} ${saveto}
  else
    read -p "Files already exist in target directory $Target1. Overwrite? (y/n) : " Response
    case $Response in
      "y" | "Y" | "") echo "Copying files from $savefrom to $saveto"
          cp -a ${savefrom} ${saveto}
        ;;
      *) echo "Not copying"
    esac
  fi 
}

TestDestination() { # Tests before backup
Target=`ls $Destination` # Check that Destination exists and is turned on
if [ -n "$Target" ]; then
  Today=`date +%F`       # Today's date
  Target1=`ls $Destination | grep ${Today}` # Check for existing backup
  if [ -z "$Target1" ]; then
    echo "Making target directory $Target1"
  #  mkdir $Destination/$Today
  else
    echo "Target $Target1 not created as already exists"
  fi
else
  while [ -z "$Target" ]
  do
    read -p "Turn on the backup disks. Press [Enter] when ready."
    Target=`ls $Destination`
  done
fi
}

SourcesChecklist() {
  echo
  # Display sources for user to select those to run
  # Display only names, but output FilePath
}

RunBackups() { # User initiates backups by selecting from checklist
  # First check to make sure data file exists and has minimum of Destination and one Source
  SourcesChecklist # 
  TestDestination # Check and prepare dated folder on target device
  # Run all selected backups (using only FilePath
}

#
# Execute
#

CheckDataFile # First check if data file exists, and if not create it

# Let's have a main menu in this one!!!
MainMenu

rm seguro.output
